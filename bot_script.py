import telebot
import psutil
import os
import random
from telebot import types
import psutil
import subprocess
import threading
import time
from telebot.apihelper import ApiTelegramException
import schedule
from datetime import datetime, timedelta
import sys
import string
from PIL import Image, ImageDraw, ImageFont
from samp_client.client import SampClient

bot_token = "7444964455:AAFUr6km1Y8SP-VIsaKmgdfjdNEarvfghd2ZVc"
bot = telebot.TeleBot(bot_token)

admin_ids = [123123123]
black_list = ["127.0.0.1", "0.0.0.0"]
data_file = 'user_data.txt'
promo_codes = {}
user_last_click = {}
cooldown_seconds = 15
test = 0
test2 = 0 

agreement_text = """
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ

–ü—Ä–µ–∂–¥–µ —á–µ–º –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ.

1. –û–±—â–∏–µ –ø–æ–ª–æ–∂–µ–Ω–∏—è

–î–∞–Ω–Ω–æ–µ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (–¥–∞–ª–µ–µ ‚Äì –°–æ–≥–ª–∞—à–µ–Ω–∏–µ) —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∞–≤–∏–ª–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–µ–∂–¥—É –≤–ª–∞–¥–µ–ª—å—Ü–µ–º Telegram-–±–æ—Ç–∞ (–¥–∞–ª–µ–µ ‚Äì –ë–æ—Ç) –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ò–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ (–¥–∞–ª–µ–µ ‚Äì –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å), –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ë–æ—Ç.

2. –ü—Ä–µ–¥–º–µ—Ç –°–æ–≥–ª–∞—à–µ–Ω–∏—è

–ë–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É, —Å–≤—è–∑–∞–Ω–Ω–æ–º—É —Å [–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –∏–≥—Ä–æ–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä].

3. –û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏

3.1. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Å–±–æ–∏ –≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –ë–æ—Ç–∞, –≤—ã–∑–≤–∞–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –∞ —Ç–∞–∫–∂–µ –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—É—é –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ë–æ—Ç–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–∞–º, –Ω–∞—Ö–æ–¥—è—â–∏–º—Å—è –≤–Ω–µ –∑–æ–Ω—ã –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.
3.2. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ –Ω–µ –Ω–µ—Å–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –ª—é–±—ã–µ –ø—Ä—è–º—ã–µ –∏–ª–∏ –∫–æ—Å–≤–µ–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏, –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤—Å–ª–µ–¥—Å—Ç–≤–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ë–æ—Ç–∞ –∏–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

4. –ü—Ä–∏–Ω—è—Ç–∏–µ —É—Å–ª–æ–≤–∏–π –°–æ–≥–ª–∞—à–µ–Ω–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ë–æ—Ç–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å —É—Å–ª–æ–≤–∏—è–º–∏ –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –°–æ–≥–ª–∞—à–µ–Ω–∏—è –∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å –Ω–∏–º–∏ —Å–æ–≥–ª–∞—Å–µ–Ω.

5. –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –°–æ–≥–ª–∞—à–µ–Ω–∏–∏

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –ë–æ—Ç–∞ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –≤–Ω–æ—Å–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –°–æ–≥–ª–∞—à–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
"""

def is_ip_allowed(ip):
    return ip not in black_list

def generate_captcha():
    length = random.randint(3, 5)
    captcha_text = ''.join(random.choices(string.ascii_lowercase, k=length))
    
    img_width = int(100 * 1.3)
    img_height = int(50 * 1.3)
    img = Image.new('RGB', (img_width, img_height), color = (255, 255, 255))
    d = ImageDraw.Draw(img)
    font = ImageFont.truetype("arial.ttf", int(36 * 1.3))
    
    for i, char in enumerate(captcha_text):
        d.text((10 + i * 20, 5), char, fill=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)), font=font)
    
    for _ in range(2):
        d.line([(random.randint(0, img_width // 2), random.randint(0, img_height // 2)), 
                (random.randint(img_width // 2, img_width), random.randint(0, img_height // 2))], 
               fill=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)), width=2)
    
    d.line([(0, img_height // 2), (img_width, img_height // 2)], 
           fill=(random.randint(0, 255), random.randint(0, 255), random.randint(0, 255)), width=2)
    
    img.save('captcha.png')
    return captcha_text

def count_proxies():
    with open('Proxy.txt', 'r') as file:
        return len(file.readlines())

def send_proxies(user_id):
    with open('Proxy.txt', 'r') as file:
        proxies = file.read()
        bot.send_message(user_id, proxies)

def send_lua_scripts(user_id):
    for script_file in os.listdir('scripts'):
        if script_file.endswith('.lua'):
            with open(os.path.join('scripts', script_file), 'r') as file:
                script_content = file.read()
                chunks = [script_content[i:i+4000] for i in range(0, len(script_content), 4000)]
                for i, chunk in enumerate(chunks):
                    bot.send_message(user_id, f"Content of {script_file} (Part {i+1}/{len(chunks)}):\n\n{chunk}")

def restart_bot():
    os.execv(sys.executable, ['python'] + sys.argv)
def stop_user_bots(user_id):
    user_bots = get_bots_by_user(user_id)
    for bot in user_bots:
        terminate_bot(bot)

def send_regular_notification():
    keyboard = types.InlineKeyboardMarkup()
    bot_button = types.InlineKeyboardButton(text="ü§ñ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url="https://t.me/sampblocked_bot")
    keyboard.add(bot_button)

    for user_id in user_info:
        try:
            chat = bot.get_chat(user_id)
            if chat.type in ['group', 'supergroup']:
                bot.send_message(user_id, "‚Ñπ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –±–∞–≥–∏, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–π—Ç–∏ –≤ –±–æ—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –≥—Ä—É–ø–ø–µ/—Å—É–ø–µ—Ä –≥—Ä—É–ø–ø–µ.", reply_markup=keyboard)
        except ApiTelegramException:
            continue

schedule.every(45).minutes.do(send_regular_notification)


def run_scheduler():
    while True:
        schedule.run_pending()
        time.sleep(1)

threading.Thread(target=run_scheduler).start()


def stop_all_bots(user_id):
    try:
        user_info[user_id]['active_bots'] = 0
        save_user_data(user_info)
        time.sleep(2)
        bot.send_message(user_id, "‚õî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –í—Å–µ –±–æ—Ç—ã –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ.")

        for proc in psutil.process_iter(['pid', 'name']):
            if proc.info['name'] == "RakSAMPLite.exe":
                proc.terminate()
                print(f"Terminated process {proc.info['name']} with PID {proc.info['pid']}")

    except ApiTelegramException as e:
        if e.error_code == 403:
            print(f"Cannot send message to user {user_id}: bot was blocked by the user.")
            pass
        else:
            print(f"An unexpected error occurred: {e}")

def broadcast_message(user_id, text):
    try:
        bot.send_message(user_id, text)
    except ApiTelegramException as e:
        if e.error_code == 403:
            print(f"User {user_id} has blocked the bot.")
            pass
        else:
            print(f"Failed to send message to {user_id}: {e}")


def save_user_data(user_info):
    with open(data_file, 'w') as file:
        for user_id, data in user_info.items():
            file.write(f"{user_id},{data['balance']},{data['tag']},{data['registration_date']},{data['status']},{data.get('ip', '')},{data.get('port', '')},{data.get('nickname', '')},{data['max_bots']},{data['last_bonus']},{data['active_bots']}\n")

def load_user_data():
    if not os.path.exists(data_file):
        return {}
    
    user_info = {}
    with open(data_file, 'r') as file:
        for line in file:
            line = line.strip()
            parts = line.split(',')
            if len(parts) == 11:
                user_id, balance, tag, registration_date, status, ip, port, nickname, max_bots, last_bonus, active_bots = parts
                user_info[int(user_id)] = {
                    'balance': int(balance),
                    'tag': tag,
                    'registration_date': registration_date,
                    'status': status,
                    'ip': ip,
                    'port': port,
                    'nickname': nickname,
                    'max_bots': int(max_bots),
                    'last_bonus': last_bonus,
                    'active_bots': int(active_bots)
                }
            else:
                print(f"–û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ: {line}. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.")
    return user_info

user_info = load_user_data()
print(user_info)

user_info = load_user_data()

user_counter = len(user_info)



def send_startup_message(user_id):
    with open("welcome.png", "rb") as image: #welcome.png
        time.sleep(2)
        bot.send_photo(user_id, image, caption="ü§ñ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–º–∞–Ω–¥–æ–π /start –ª–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")

def get_system_stats():
    cpu_usage = psutil.cpu_percent(interval=1)
    
    memory = psutil.virtual_memory()
    memory_usage = memory.percent
    
    disk = psutil.disk_usage('/')
    disk_usage = disk.percent
    
    net_io = psutil.net_io_counters()
    bytes_sent = net_io.bytes_sent
    bytes_recv = net_io.bytes_recv
    
    stats = (
        f"üíª –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"üîã –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞: {cpu_usage}%\n"
        f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–∑—É: {memory_usage}%\n"
        f"üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞: {disk_usage}%\n"
        f"üåê –°–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫:\n"
        f"   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {bytes_sent} –±–∞–π—Ç\n"
        f"   üì• –ü–æ–ª—É—á–µ–Ω–æ: {bytes_recv} –±–∞–π—Ç\n"
    )
    return stats

@bot.message_handler(commands=['start'])
def start(message):
    if test == 1:
        if message.chat.id not in admin_ids:
            bot.send_message(message.chat.id, "‚õî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.")
            return

    chat_type = message.chat.type
    
    if chat_type == 'private':
        captcha_text = generate_captcha()
        with open('captcha.png', 'rb') as captcha_image:
            bot.send_photo(message.chat.id, captcha_image, caption="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞–ø—á—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        bot.register_next_step_handler(message, lambda msg: check_captcha(msg, captcha_text))
    else:
        show_menu(message)

def check_captcha(message, captcha_text):
    if message.text.lower() == captcha_text:
        bot.send_message(message.chat.id, "–ö–∞–ø—á–∞ –≤–µ—Ä–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
        show_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–∞–ø—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        start(message)

def show_menu(message):
    global user_counter
    user_id = message.chat.id
    chat_type = message.chat.type

    if user_id not in user_info:
        if chat_type == 'group' or chat_type == 'supergroup':
            initial_balance = 0
        else:
            initial_balance = 120

        user_info[user_id] = {
            'balance': initial_balance,
            'tag': f'user_{user_id}',
            'registration_date': datetime.now().strftime("%Y-%m-%d"),
            'status': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            'ip': '',
            'port': '',
            'nickname': '',
            'max_bots': 1,
            'last_bonus': '',
            'active_bots': 0
        }
        save_user_data(user_info)
        user_counter += 1
        notify_admin_about_new_user(user_id)

    send_startup_message(user_id)

    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info"),
        types.InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∏—Å—Ç–µ–º—É", callback_data="stats"),
    )
    keyboard.add(
        types.InlineKeyboardButton(text="üìà –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="testing"),
        types.InlineKeyboardButton(text="üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏", callback_data="count_proxies"),
    )
    keyboard.add(
        types.InlineKeyboardButton(text="üîå –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é", callback_data="connect"),
     #   types.InlineKeyboardButton(text="üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", callback_data="contact_admin")
    )
    keyboard.add(
        types.InlineKeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
        types.InlineKeyboardButton(text="üèÜ –¢–æ–ø 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É", callback_data="leaderboard"),
    #    types.InlineKeyboardButton(text="üéüÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="activate_promo"),
    )
    if chat_type == 'private':
        keyboard.add(
        types.InlineKeyboardButton(text="üéÅ –ë–æ–Ω—É—Å", callback_data="get_minute"),
        types.InlineKeyboardButton(text="üìû –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", callback_data="contact_admin"),
        types.InlineKeyboardButton(text="üéüÔ∏è –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="activate_promo")
    )


    keyboard.add(
        types.InlineKeyboardButton(text="üìà –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="total_users"),
    )

    if user_id in admin_ids:
        keyboard.add(
            types.InlineKeyboardButton(text="üìß –†–∞–∑—Å—ã–ª–∫–∞", callback_data="broadcast"),
            types.InlineKeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ–º –±–∞–ª–∞–Ω—Å", callback_data="add_balance_all"),
            types.InlineKeyboardButton(text="üí∏ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="add_balance_user"),
            types.InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="block_user"),
            types.InlineKeyboardButton(text="üõ†Ô∏è –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="create_promo"),
            types.InlineKeyboardButton(text="üìß –û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã", callback_data="admin_responses"),
            types.InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç –±–æ—Ç–æ–≤", callback_data="change_max_bots"),
            types.InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏", callback_data="stop_all_bots"),
            types.InlineKeyboardButton(text="üõ† –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –±–æ—Ç–∞", callback_data="restart_bot"),
            types.InlineKeyboardButton(text="üìß –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫—Ä–∏–ø—Ç—ã", callback_data="view_scripts"),
        )

    bot.send_message(user_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    
user_last_log_time = {}
user_last_click = {}
log_cooldown_seconds = 15

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    global user_last_log_time
    global user_last_click

    user_id = call.message.chat.id
    user_name = call.from_user.username
    current_time = datetime.now()
    
    last_log_time = user_last_log_time.get(call.from_user.id)
    
    if last_log_time:
        elapsed_time = (current_time - last_log_time).total_seconds()
        if elapsed_time < log_cooldown_seconds:
            remaining_time = log_cooldown_seconds - elapsed_time
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {call.from_user.id}) –ø—ã—Ç–∞–ª—Å—è –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ.")
            try:
                bot.answer_callback_query(call.id, f"‚è∞ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {int(remaining_time)} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –¥–µ–π—Å—Ç–≤–∏–µ–º.", show_alert=True)
            except telebot.apihelper.ApiTelegramException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {e}")
            return

    user_last_log_time[call.from_user.id] = current_time

    timestamp = current_time.strftime("%Y-%m-%d %H:%M:%S")
    log_message = f"[BOT LOG] Date: [{timestamp}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} ID: {call.from_user.id} –≤ —á–∞—Ç–µ ID: {user_id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É."
    print(log_message)

    if call.message.chat.type in ['group', 'supergroup']:
        bot.send_message(user_id, log_message)
        
    user_last_click[user_id] = current_time

    if call.data == "info":
        bot.send_message(user_id, "‚ÑπÔ∏è –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–≥—Ä–∞—Ç—å –¥—Ä—É–≥–∏–º –ª—é–¥—è–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n\n"
                          "üí¨ –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —á–µ–ª–æ–≤–µ–∫ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ offline –∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–ª–æ–Ω –∏–Ω–∞—á–µ –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ –¥–∞, –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å —Å–≤–æ—é –≥—Ä—É–ø–ø—É üî•\n\n"
                          "üî• –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –∏ —É—Å–ª—É–≥–∞–º üî•\n\n"
                          "üí¨ –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å –≤ –±–æ—Ç–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 15 —Ä—É–±–ª–µ–π.\n\n"
                          "üí¨ –¢–∞–∫-–∂–µ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∞–π–ø–∏ –≤ black list, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 850 —Ä—É–±–ª–µ–π.\n\n"
                          "‚è≥ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∂–µ–ª–∞—é—â–∏—Ö –ø—Ä–æ–¥–ª–∏—Ç—å —Å–µ—Å—Å–∏—é, 120 –º–∏–Ω—É—Ç –æ–±–æ–π–¥—É—Ç—Å—è –≤ 20 —Ä—É–±–ª–µ–π.\n\n"
                          "üí¨ –¢–∞–∫-–∂–µ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É, —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 500 —Ä—É–±–ª–µ–π.\n\n"
                          "üîì –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç? –≠—Ç–æ –±—É–¥–µ—Ç —Å—Ç–æ–∏—Ç—å 80 —Ä—É–±–ª–µ–π.\n\n"
                          "‚ùó –í–∞–∂–Ω–æ: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –Ω–∞—à–µ–º—É –æ–±—â–µ–º—É —á–∞—Ç—É: none [BANNED GROUP]")
    elif call.data == "stats":
        bot.send_message(user_id, "üìä –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        stats = get_system_stats()
        bot.send_message(user_id, stats)
    elif call.data == "contact_admin":
        bot.send_message(user_id, "üìû –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        bot.register_next_step_handler(call.message, forward_question_to_admin)
    if test == 1:
        bot.send_message(call.message.chat.id, "‚õî –ë–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.")
        return
    elif call.data == "stop_all_bots":
        stop_all_bots(user_id)
    if call.data == "count_proxies":
        bot.send_message(user_id, f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∫—Å–∏: {count_proxies()}")
    elif call.data == "view_proxies":
        send_proxies(user_id)
    elif call.data == "view_scripts":
        send_lua_scripts(user_id)
    elif call.data == "restart_bot":
        bot.send_message(user_id, "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞...")
        restart_bot()
    elif call.data == "connect":
        if user_info[user_id]['active_bots'] < user_info[user_id]['max_bots']:
            command = "/addbot Sam_Mason 127.0.0.1 7777 15"
            bot.send_message(user_id, f"<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b> <code>{command}</code>\n\n"
                                      "<b>–≥–¥–µ:</b>\n"
                                      "<b>Sam_Mason</b> - –Ω–∏–∫\n"
                                      "<b>127.0.0.1</b> - IP-–∞–¥—Ä–µ—Å\n"
                                      "<b>7777</b> - –ø–æ—Ä—Ç\n"
                                      "<b>15</b> - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç.",
                             parse_mode="HTML")
           # bot.register_next_step_handler(call.message, ask_for_time)
        else:
            bot.send_message(user_id, "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–æ–≤.")
    elif call.data == "profile":
        user_data = user_info.get(user_id)
        profile_info = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {user_data['balance']} –º–∏–Ω—É—Ç\n"
            f"üè∑Ô∏è –¢—ç–≥: {user_data['tag']}\n"
            f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_data['registration_date']}\n"
            f"‚öôÔ∏è –°—Ç–∞—Ç—É—Å: {user_data['status']}\n"
            f"üÜî –í–∞—à ID: {user_id}\n"
            f"üë§ –¢–µ–∫—É—â–∏–µ –±–æ—Ç—ã: {user_data['nickname']}\n"
            f"üîÑ –õ–∏–º–∏—Ç –±–æ—Ç–æ–≤: {user_data['max_bots']}\n"
        )
        bot.send_message(user_id, profile_info)
    elif call.data == "leaderboard":
            leaderboard = generate_leaderboard(user_info, user_id)
            bot.send_message(user_id, leaderboard)
    if call.data == "testing":
           bot.send_message(call.message.chat.id, agreement_text)
    elif call.data == "broadcast":
        if user_id in admin_ids:
            bot.send_message(user_id, "üìß –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            bot.register_next_step_handler(call.message, broadcast_message)
    elif call.data == "add_balance_all":
        if user_id in admin_ids:
            bot.send_message(user_id, "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
            bot.register_next_step_handler(call.message, add_balance_all_users)
    elif call.data == "add_balance_user":
        if user_id in admin_ids:
            bot.send_message(user_id, "üí∏ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID —Å—É–º–º–∞.")
            bot.register_next_step_handler(call.message, add_balance_user)
    elif call.data == "block_user":
        if user_id in admin_ids:
            bot.send_message(user_id, "üö´ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.")
            bot.register_next_step_handler(call.message, block_user)
    elif call.data == "create_promo":
        if user_id in admin_ids:
            bot.send_message(user_id, "üõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ø—Ä–æ–º–æ–∫–æ–¥ –º–∏–Ω—É—Ç—ã.")
            bot.register_next_step_handler(call.message, create_promo)
    elif call.data == "activate_promo":
        bot.send_message(user_id, "üéüÔ∏è –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        bot.register_next_step_handler(call.message, activate_promo)
    elif call.data == "admin_responses":
        if user_id in admin_ids:
            bot.send_message(user_id, "üìß –í–≤–µ–¥–∏—Ç–µ ID –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID –æ—Ç–≤–µ—Ç.")
            bot.register_next_step_handler(call.message, admin_responses)
    elif call.data == "stop_all_bots":
        if user_id in admin_ids:
           stop_all_bots()
           bot.send_message(user_id, "‚úÖ –í—Å–µ –±–æ—Ç—ã –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")
    elif call.data == "total_users":
            bot.send_message(user_id, f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_counter}")
    elif call.data == "change_max_bots":
        if user_id in admin_ids:
            bot.send_message(user_id, "üîÑ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç –±–æ—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: ID –ª–∏–º–∏—Ç.")
            bot.register_next_step_handler(call.message, change_max_bots)
    elif call.data == "get_minute":
        print("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞")
        chat_type = bot.get_chat(call.message.chat.id).type
        print(f"–¢–∏–ø —á–∞—Ç–∞: {chat_type}")
        
        if chat_type == 'private':
            user_id = call.from_user.id
            last_bonus_date = user_info.get(user_id, {}).get('last_bonus', None)
            today_date = datetime.now().strftime("%Y-%m-%d")

            if last_bonus_date != today_date:
                user_info.setdefault(user_id, {})['balance'] += 15
                user_info[user_id]['last_bonus'] = today_date
                save_user_data(user_info)

                try:
                    bot.send_message(user_id, "üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 15 –º–∏–Ω—É—Ç!")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                try:
                    bot.send_message(user_id, "‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ –±–æ–Ω—É—Å —Å–µ–≥–æ–¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        else:
            bot.answer_callback_query(call.id, "‚õî –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.", show_alert=True)

            
def generate_leaderboard(user_info, current_user_id):
    sorted_users = sorted(user_info.items(), key=lambda x: x[1]['balance'], reverse=True)
    leaderboard = "üèÜ –¢–æ–ø 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –±–∞–ª–∞–Ω—Å—É:\n\n"
    
    for i, (user_id, data) in enumerate(sorted_users[:100]):
        leaderboard += f"{i+1}. üÜî {data['tag']} - üí∞ {data['balance']} –º–∏–Ω—É—Ç\n"
    
    for i, (user_id, data) in enumerate(sorted_users):
        if user_id == current_user_id:
            if i >= 10:
                leaderboard += "\nüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ\n"
                leaderboard += f"(–í—ã) - {i+1}. üÜî {data['tag']} - üí∞ {data['balance']} –º–∏–Ω—É—Ç"
                leaderboard += "\nüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜüèÜ\n"
            break
    
    return leaderboard


def stop_user_bots():
    for user_id, user_data in user_info.items():
        if user_data.get('active_bots', 0) > 0:
            for proc in psutil.process_iter():
                if proc.name() == "RakSAMPLite.exe":
                    proc.terminate()

            user_data['active_bots'] = 0
            bot.send_message(user_id, "‚õî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: –í—Å–µ –±–æ—Ç—ã –±—ã–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –æ–¥–Ω–∏–º –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø—Ä–∏—á–∏–Ω–µ.")
    
    save_user_data(user_info)
    time.sleep(5)



def get_server_info(ip, port):
    try:
        with SampClient(address=ip, port=port) as client:
            info = client.get_server_info()
        return info
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return None

def create_bot(user_id, nickname, ip, port, time_minutes):
    if not is_ip_allowed(ip):
        bot.send_message(user_id, "‚õî –≠—Ç–æ—Ç IP-–∞–¥—Ä–µ—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return

    user_data = user_info[user_id]

    if user_data['balance'] < time_minutes:
        time.sleep(5)
        bot.send_message(user_id, "‚è≥ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–∏–Ω—É—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å.")
        return

    if user_data['active_bots'] >= user_data['max_bots']:
        time.sleep(5)
        bot.send_message(user_id, "‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤.")
        return

    server_info = get_server_info(ip, port)
    if not server_info:
        bot.send_message(user_id, "‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω –∏–ª–∏ –Ω–∞—à IP –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –¥—Ä—É–≥–æ–º—É —Å–µ—Ä–≤–µ—Ä—É –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ.")
        return

    user_data['balance'] -= time_minutes
    save_user_data(user_info)

    if time_minutes >= 60 and random.random() <= 0.5:
        cashback_amount = int(time_minutes * 0.05)
        user_info[user_id]['balance'] += cashback_amount
        save_user_data(user_info)
        bot.send_message(user_id, f"üéâ –°–µ–≥–æ–¥–Ω—è –≤–∞–º –ø–æ–≤–µ–∑–ª–æ, –∏ –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –∫–µ—à–±–µ–∫ –≤ –≤–∏–¥–µ {cashback_amount} –º–∏–Ω—É—Ç!")

    user_data['active_bots'] += 1
    save_user_data(user_info)

    bot_command = ["RakSAMPLite.exe", "-h", ip, "-p", str(port), "-n", nickname, "-z"]

    bot_process = subprocess.Popen(bot_command)

    time.sleep(2)
    bot.send_message(user_id, f"ü§ñ –ë–æ—Ç {nickname} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω. –°–µ—Ä–≤–µ—Ä: {ip}:{port} —Å–µ—Å—Å–∏—è –±—É–¥–µ—Ç –¥–ª–∏—Ç—Å—è {time_minutes} –º–∏–Ω—É—Ç!")

    server_message = f"üìä –°–µ—Ä–≤–µ—Ä: {server_info.hostname}\n–†–µ–∂–∏–º: {server_info.gamemode}\n–û–Ω–ª–∞–π–Ω: {server_info.players}/{server_info.max_players}"
    if hasattr(server_info, 'ping'):
        server_message += f"\n–ü–∏–Ω–≥: {server_info.ping}"

    bot.send_message(user_id, server_message)

    time.sleep(20)
    bot.send_message(user_id, f"üì¢ - –ï—Å–ª–∏ –±–æ—Ç {nickname} –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –º–∏–Ω—É—Ç—ã.")

    for admin_id in admin_ids:
        bot.send_message(admin_id, f"üì¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞ —Å –Ω–∏–∫–æ–º {nickname} –Ω–∞ {time_minutes} –º–∏–Ω—É—Ç {ip}:{port}.")

    def stop_bot():
        bot_process.terminate()
        bot.send_message(user_id, f"‚è∞ –í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –ë–æ—Ç {nickname} –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç {ip}:{port}.")
        
        user_data['active_bots'] -= 1
        save_user_data(user_info)

    timer = threading.Timer(time_minutes * 60, stop_bot)
    timer.start()

#def ask_for_time(message):
#    user_id = message.chat.id
#    try:
#        data = message.text.split()
#        if len(data) != 5:
 #           raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
 #       nickname, ip, port, time_minutes = data[1:]
#       create_bot(user_id, nickname, ip, port, int(time_minutes))
#    except ValueError:
#        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. (–ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ —Å–Ω–æ–≤–∞!)")
        
def forward_question_to_admin(message):
    user_id = message.chat.id
    question = message.text
    for admin_id in admin_ids:
        bot.send_message(admin_id, f"‚ùì –í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {question}")
    bot.send_message(user_id, "‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

def notify_admin_about_new_user(user_id):
    for admin_id in admin_ids:
        bot.send_message(admin_id, f"üì¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ID: {user_id}")


def broadcast_message(message):
    if message.chat.id in admin_ids:
        admin_note = " üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n\n "
        text = admin_note + message.text
        for user_id in user_info.keys():
            try:
                bot.send_message(user_id, text)
            except telebot.apihelper.ApiTelegramException as e:
                if e.error_code == 403:
                    print(f"User {user_id} blocked the bot, skipping. [–†–ê–ó–ó–°–´–õ–ö–ê]")
                else:
                    raise e



def add_balance_all_users(message):
    try:
        amount = int(message.text)
        for user_id in user_info.keys():
            user_info[user_id]['balance'] += amount
        save_user_data(user_info)
        bot.send_message(message.chat.id, f"üí∏ –ë–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –º–∏–Ω—É—Ç.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def add_balance_user(message):
    try:
        user_id, amount = message.text.split()
        user_id = int(user_id)
        amount = int(amount)
        if user_id in user_info:
            user_info[user_id]['balance'] += amount
            save_user_data(user_info)
            bot.send_message(message.chat.id, f"üí∏ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} –º–∏–Ω—É—Ç.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def block_user(message):
    try:
        user_id = int(message.text)
        if user_id in user_info:
            user_info[user_id]['status'] = '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
            save_user_data(user_info)
            bot.send_message(message.chat.id, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def create_promo(message):
    try:
        promo_code, minutes = message.text.split()
        minutes = int(minutes)
        promo_codes[promo_code] = minutes
        bot.send_message(message.chat.id, f"üõ†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} —Å–æ–∑–¥–∞–Ω –∏ –¥–∞—ë—Ç {minutes} –º–∏–Ω—É—Ç.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def activate_promo(message):
    user_id = message.chat.id
    promo_code = message.text
    if promo_code in promo_codes:
        minutes = promo_codes[promo_code]
        user_info[user_id]['balance'] += minutes
        save_user_data(user_info)
        bot.send_message(user_id, f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ {promo_code} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")
        del promo_codes[promo_code]
    else:
        bot.send_message(user_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def admin_responses(message):
    try:
        print(f"Received message: {message.text}")
        
        question_id, response = message.text.split(maxsplit=1)
        question_id = int(question_id)
        
        if question_id not in user_info:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        bot.send_message(question_id, f"üìß –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {response}")
        bot.send_message(message.chat.id, "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except ValueError as e:
        print(f"Error: {e}")
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


def change_max_bots(message):
    try:
        user_id, new_limit = message.text.split()
        user_id = int(user_id)
        new_limit = int(new_limit)
        if user_id in user_info:
            user_info[user_id]['max_bots'] = new_limit
            save_user_data(user_info)
            bot.send_message(message.chat.id, f"üîÑ –õ–∏–º–∏—Ç –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_limit}.")
        else:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

def start_bot():
    bot.polling(none_stop=True)

def reset_bots_and_notify_users():
    for user_id, data in user_info.items():
        data['active_bots'] = 0
        try:
           # bot.send_message(user_id, "ü§ñ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
            for proc in psutil.process_iter(['pid', 'name']):
                if proc.info['name'] == "RakSAMPLite.exe":
                   proc.terminate()
        except telebot.apihelper.ApiTelegramException as e:
            if 'chat not found' in e.result_json.get('description', '').lower():
                print(f"Chat with user ID {user_id} not found. Skipping...")
            else:
                print(f"Error sending message to user {user_id}: {e}")
    save_user_data(user_info)


def send_message_safe(user_id, message):
    try:
        bot.send_message(user_id, message)
    except telebot.apihelper.ApiTelegramException as e:
        if e.result_json['description'] == 'Forbidden: bot was blocked by the user' or \
           e.result_json['description'] == 'Forbidden: bot was kicked from the supergroup chat':
            print(f"User with ID {user_id} has blocked or kicked the bot. Skipping...")
        else:
            raise

reset_bots_and_notify_users()

@bot.message_handler(commands=['addbot'])
def add_bot_command(message):
    if test2 == 1 and message.chat.type != 'private':
        bot.send_message(message.chat.id, "<b>‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.</b>", parse_mode='HTML')
        return

    try:
        data = message.text.split()
        
        if len(data) < 4 or len(data) > 5:
            raise ValueError("‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:</b>\n"
                             "<code>/addbot &lt;–Ω–∏–∫&gt; &lt;IP:–ø–æ—Ä—Ç&gt; &lt;–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö&gt;</code> \n"
                             "<b>–∏–ª–∏</b>\n"
                             "<code>/addbot &lt;IP&gt; &lt;–ø–æ—Ä—Ç&gt; &lt;–≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö&gt;</code>")

        nickname = data[1]
        
        if ':' in data[2]:
            ip, port = data[2].split(':')
            time_minutes = int(data[3])
        else:
            ip = data[2]
            port = data[3]
            time_minutes = int(data[4])

        create_bot(message.chat.id, nickname, ip, port, time_minutes)
    except ValueError as e:
        bot.send_message(message.chat.id, str(e), parse_mode='HTML')

def start_bot():
    while True:
        try:
            bot.polling(none_stop=True, interval=0, timeout=20, long_polling_timeout=40)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            time.sleep(15)

def restart_bot():
    print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    sys.exit(1)

def schedule_restart():
    schedule.every(1).hours.do(restart_bot)
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0, timeout=20, long_polling_timeout=40)
    bot_thread = threading.Thread(target=start_bot)
    bot_thread.start()
